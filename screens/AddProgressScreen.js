import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  Button,
  StyleSheet,
  Alert,
  KeyboardAvoidingView,
  ScrollView,
  Platform,
  TouchableWithoutFeedback,
  Keyboard,
} from "react-native";
import api from "../api";
import AsyncStorage from "@react-native-async-storage/async-storage";

const AddProgressScreen = ({ route, navigation }) => {
  const [userId, setUserId] = useState(null);
  const [weight, setWeight] = useState("");
  const [chest, setChest] = useState("");
  const [waist, setWaist] = useState("");
  const [thigh, setThigh] = useState("");
  const [workoutTime, setWorkoutTime] = useState("");
  const [liftingWeight, setLiftingWeight] = useState("");
  const [errors, setErrors] = useState({}); // üîπ L∆∞u l·ªói nh·∫≠p li·ªáu

  useEffect(() => {
    if (route?.params?.userId) {
      setUserId(route.params.userId);
    } else {
      AsyncStorage.getItem("user").then((userData) => {
        if (userData) {
          const user = JSON.parse(userData);
          setUserId(user.id);
        }
      });
    }
  }, [route]);

  // üîπ Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠p v√†o
  const validateInputs = () => {
    let newErrors = {};
    if (!weight || parseFloat(weight) <= 0)
      newErrors.weight = "C√¢n n·∫∑ng kh√¥ng ƒë∆∞·ª£c tr·ªëng!";
    if (!workoutTime || parseInt(workoutTime) <= 0)
      newErrors.workoutTime = "Th·ªùi gian t·∫≠p kh√¥ng ƒë∆∞·ª£c tr·ªëng!";
    if (!liftingWeight || parseFloat(liftingWeight) < 0)
      newErrors.liftingWeight = "M·ª©c t·∫° kh√¥ng ƒë∆∞·ª£c tr·ªëng!";

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0; // ‚úÖ N·∫øu kh√¥ng c√≥ l·ªói, return true
  };

  const saveProgress = () => {
    if (!userId) {
      Alert.alert("L·ªói", "Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng!");
      return;
    }

    if (!validateInputs()) {
      Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p ƒë√∫ng d·ªØ li·ªáu!"); // Hi·ªÉn th·ªã l·ªói chung
      return;
    }

    Keyboard.dismiss(); // üîπ T·∫Øt b√†n ph√≠m khi nh·∫•n "L∆∞u ti·∫øn tr√¨nh"

    const newProgress = {
      userId: userId,
      date: new Date().toISOString().split("T")[0],
      weight: parseFloat(weight),
      chest: parseFloat(chest),
      waist: parseFloat(waist),
      thigh: parseFloat(thigh),
      workoutTime: parseInt(workoutTime),
      liftingWeight: parseFloat(liftingWeight),
    };

    api
      .post("/progress", newProgress)
      .then(() => {
        Alert.alert("Th√†nh c√¥ng", "Ti·∫øn tr√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u!");
        navigation.goBack();
      })
      .catch((error) => {
        console.error("L·ªói khi l∆∞u ti·∫øn tr√¨nh:", error);
        Alert.alert("L·ªói", "Kh√¥ng th·ªÉ l∆∞u ti·∫øn tr√¨nh.");
      });
  };

  return (
    <KeyboardAvoidingView
      behavior={Platform.OS === "ios" ? "padding" : "height"}
      style={styles.container}
    >
      {/* üîπ Nh·∫•n v√†o v√πng tr·ªëng ƒë·ªÉ t·∫Øt b√†n ph√≠m */}
      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
        <ScrollView contentContainerStyle={styles.scrollContainer}>
          <Text style={styles.title}>Th√™m ti·∫øn tr√¨nh</Text>

          {/* √î nh·∫≠p d·ªØ li·ªáu + Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
          <TextInput
            style={[styles.input, errors.weight && styles.inputError]}
            placeholder="C√¢n n·∫∑ng (kg)"
            keyboardType="numeric"
            onChangeText={setWeight}
          />
          {errors.weight && (
            <Text style={styles.errorText}>{errors.weight}</Text>
          )}

          <TextInput
            style={[styles.input]}
            placeholder="V√≤ng ng·ª±c (cm)"
            keyboardType="numeric"
            onChangeText={setChest}
          />

          <TextInput
            style={[styles.input]}
            placeholder="V√≤ng eo (cm)"
            keyboardType="numeric"
            onChangeText={setWaist}
          />

          <TextInput
            style={[styles.input]}
            placeholder="V√≤ng ƒë√πi (cm)"
            keyboardType="numeric"
            onChangeText={setThigh}
          />

          <TextInput
            style={[styles.input, errors.workoutTime && styles.inputError]}
            placeholder="Th·ªùi gian t·∫≠p (ph√∫t)"
            keyboardType="numeric"
            onChangeText={setWorkoutTime}
          />
          {errors.workoutTime && (
            <Text style={styles.errorText}>{errors.workoutTime}</Text>
          )}

          <TextInput
            style={[styles.input, errors.liftingWeight && styles.inputError]}
            placeholder="M·ª©c t·∫° n√¢ng (kg)"
            keyboardType="numeric"
            onChangeText={setLiftingWeight}
          />
          {errors.liftingWeight && (
            <Text style={styles.errorText}>{errors.liftingWeight}</Text>
          )}

          <Button title="L∆∞u ti·∫øn tr√¨nh" onPress={saveProgress} />
        </ScrollView>
      </TouchableWithoutFeedback>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f8f9fa",
  },
  scrollContainer: {
    flexGrow: 1,
    padding: 20,
    justifyContent: "center",
  },
  title: {
    fontSize: 22,
    fontWeight: "bold",
    textAlign: "center",
    marginBottom: 20,
  },
  input: {
    borderWidth: 1,
    borderColor: "#ddd",
    padding: 10,
    marginBottom: 5,
    borderRadius: 5,
    backgroundColor: "#fff",
  },
  inputError: {
    borderColor: "red", // üîπ Vi·ªÅn ƒë·ªè khi c√≥ l·ªói
  },
  errorText: {
    color: "red",
    fontSize: 14,
    marginBottom: 10,
  },
});

export default AddProgressScreen;

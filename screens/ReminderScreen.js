import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Alert,
  StyleSheet,
  FlatList,
  Platform,
} from "react-native";
import DateTimePicker from "@react-native-community/datetimepicker";
import AsyncStorage from "@react-native-async-storage/async-storage";
import * as Notifications from "expo-notifications";
import api from "../api";

// C·∫•u h√¨nh th√¥ng b√°o ƒë·ªÉ hi·ªÉn th·ªã ngay c·∫£ khi ·ª©ng d·ª•ng ch·∫°y n·ªÅn
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
  }),
});

const ReminderScreen = ({ navigation }) => {
  const [name, setName] = useState("");
  const [time, setTime] = useState(new Date());
  const [days, setDays] = useState([]);
  const [showTimePicker, setShowTimePicker] = useState(false);
  const [schedules, setSchedules] = useState([]);

  useEffect(() => {
    registerForPushNotifications();
    fetchSchedules();
  }, []);

  // üìå Xin quy·ªÅn th√¥ng b√°o t·ª´ h·ªá th·ªëng
  const registerForPushNotifications = async () => {
    const { status } = await Notifications.getPermissionsAsync();
    if (status !== "granted") {
      const { status: newStatus } = await Notifications.requestPermissionsAsync();
      if (newStatus !== "granted") {
        Alert.alert("L·ªói", "B·∫°n c·∫ßn c·∫•p quy·ªÅn th√¥ng b√°o ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.");
      }
    }
  };

  // üìå L√™n l·ªãch th√¥ng b√°o d·ª±a tr√™n ng√†y gi·ªù ƒë√£ ch·ªçn
  const scheduleNotification = async (hour, minute, selectedDays, id) => {
  console.log("Scheduling notifications for:", hour, minute, selectedDays);

  for (const day of selectedDays) {
    const now = new Date();
    let notificationDate = new Date();
    
    // ƒê·∫∑t ng√†y g·∫ßn nh·∫•t ph√π h·ª£p v·ªõi `selectedDays`
    notificationDate.setHours(hour, minute, 0, 0); // Gi·ªØ nguy√™n gi·ªù/ph√∫t/gi√¢y/millisecond

    // X√°c ƒë·ªãnh kho·∫£ng c√°ch t·ªõi ng√†y t·∫≠p g·∫ßn nh·∫•t
    const today = now.getDay(); // L·∫•y th·ª© hi·ªán t·∫°i (0 = Ch·ªß Nh·∫≠t, 6 = Th·ª© B·∫£y)
    let daysUntilNextWorkout = (day - today + 7) % 7;
    if (daysUntilNextWorkout === 0 && now > notificationDate) {
      // N·∫øu h√¥m nay l√† ng√†y t·∫≠p nh∆∞ng gi·ªù ƒë√£ qua, ƒë·∫∑t v√†o tu·∫ßn sau
      daysUntilNextWorkout = 7;
    }

    // C·ªông s·ªë ng√†y c·∫ßn thi·∫øt ƒë·ªÉ ƒë·∫∑t l·ªãch
    notificationDate.setDate(notificationDate.getDate() + daysUntilNextWorkout);

    console.log("Trigger Date:", notificationDate);

    await Notifications.scheduleNotificationAsync({
      identifier: `${id}-${day}`,
      content: {
        title: "Nh·∫Øc nh·ªü t·∫≠p luy·ªán üí™",
        body: `ƒê√£ ƒë·∫øn gi·ªù t·∫≠p luy·ªán: ${name}!`,
        sound: "default",
      },
      trigger: notificationDate, // Ch·∫°y v√†o ng√†y gi·ªù ch√≠nh x√°c
    });
  }
};



  // üìå L·∫•y danh s√°ch l·ªãch nh·∫Øc ƒë√£ l∆∞u t·ª´ API
  const fetchSchedules = async () => {
    try {
      const user = await AsyncStorage.getItem("user");
      if (!user) return;
      const userId = JSON.parse(user).id;
      const response = await api.get(`/workoutSchedules?userId=${userId}`);
      setSchedules(response.data);
    } catch (error) {
      console.error("L·ªói khi t·∫£i l·ªãch h·∫πn gi·ªù:", error);
    }
  };

  // üìå L∆∞u l·ªãch t·∫≠p m·ªõi
  const saveSchedule = async () => {
    if (!name.trim() || days.length === 0) {
      Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p t√™n l·ªãch t·∫≠p v√† ch·ªçn √≠t nh·∫•t m·ªôt ng√†y!");
      return;
    }

    try {
      const user = await AsyncStorage.getItem("user");
      if (!user) return;
      const userId = JSON.parse(user).id;
      const newSchedule = { userId, name, time: time.toTimeString().slice(0, 5), days };
      const response = await api.post("/workoutSchedules", newSchedule);

      await scheduleNotification(time.getHours(), time.getMinutes(), days, response.data.id);
      Alert.alert("Th√†nh c√¥ng", "L·ªãch h·∫πn gi·ªù ƒë√£ ƒë∆∞·ª£c t·∫°o!");
      setName("");
      setDays([]);
      fetchSchedules();
    } catch (error) {
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ l∆∞u l·ªãch h·∫πn gi·ªù, vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  // üìå X√≥a l·ªãch h·∫πn v√† h·ªßy th√¥ng b√°o
  const deleteSchedule = async (id, days) => {
    try {
        await api.delete(`/workoutSchedules/${id}`);

        // H·ªßy t·∫•t c·∫£ th√¥ng b√°o li√™n quan ƒë·∫øn l·ªãch n√†y
        for (const day of days) {
            await Notifications.cancelScheduledNotificationAsync(`${id}-${day}`);
        }

        Alert.alert("Th√†nh c√¥ng", "ƒê√£ x√≥a l·ªãch nh·∫Øc nh·ªü.");
        setSchedules(schedules.filter((item) => item.id !== id));
    } catch (error) {
        Alert.alert("L·ªói", "Kh√¥ng th·ªÉ x√≥a l·ªãch nh·∫Øc nh·ªü.");
    }
};

  return (
    <View style={styles.container}>
      <Text style={styles.title}>ƒê·∫∑t l·ªãch nh·∫Øc t·∫≠p luy·ªán</Text>
      <TextInput placeholder="T√™n l·ªãch t·∫≠p" style={styles.input} onChangeText={setName} value={name} />
      <TouchableOpacity style={styles.timeButton} onPress={() => setShowTimePicker(true)}>
        <Text style={styles.timeButtonText}>Ch·ªçn gi·ªù</Text>
      </TouchableOpacity>
      {showTimePicker && (
        <DateTimePicker
          value={time}
          mode="time"
          is24Hour={true}
          display={Platform.OS === "ios" ? "spinner" : "default"}
          onChange={(event, selectedTime) => {
            setShowTimePicker(false);
            if (selectedTime) setTime(selectedTime);
          }}
        />
      )}
      <Text style={styles.timeText}>Gi·ªù: {time.toTimeString().slice(0, 5)}</Text>
      <Text style={styles.label}>Ch·ªçn ng√†y trong tu·∫ßn:</Text>
      <View style={styles.daysContainer}>
        {["CN", "T2", "T3", "T4", "T5", "T6", "T7"].map((day, index) => (
          <TouchableOpacity
            key={index}
            style={[styles.dayButton, days.includes(index) ? styles.dayButtonSelected : {}]}
            onPress={() =>
              setDays((prevDays) =>
                prevDays.includes(index) ? prevDays.filter((d) => d !== index) : [...prevDays, index]
              )
            }
          >
            <Text style={[styles.dayButtonText, days.includes(index) ? styles.dayButtonTextSelected : {}]}>{day}</Text>
          </TouchableOpacity>
        ))}
      </View>
      <TouchableOpacity style={styles.saveButton} onPress={saveSchedule}>
        <Text style={styles.saveButtonText}>L∆∞u</Text>
      </TouchableOpacity>
      <Text style={styles.title}>L·ªãch ƒë√£ ƒë·∫∑t</Text>
      <FlatList
        data={schedules}
        keyExtractor={(item) => item.id.toString()}
        renderItem={({ item }) => (
          <View style={styles.scheduleItem}>
            <Text>
              {item.name} - {item.time} ({item.days.map(d => ["CN", "T2", "T3", "T4", "T5", "T6", "T7"][d]).join(", ")})
            </Text>
            <TouchableOpacity onPress={() => deleteSchedule(item.id, item.days)}>
              <Text style={styles.deleteText}>X√≥a</Text>
            </TouchableOpacity>
          </View>
        )}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#f8f9fa",
  },
  title: {
    fontSize: 20,
    fontWeight: "bold",
    textAlign: "center",
    marginBottom: 20,
  },
  input: {
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 10,
    padding: 10,
    marginBottom: 15,
    backgroundColor: "#fff",
  },
  timeButton: {
    backgroundColor: "#007bff",
    padding: 10,
    borderRadius: 10,
    alignItems: "center",
  },
  timeButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
  timeText: {
    textAlign: "center",
    fontSize: 16,
    marginTop: 10,
    marginBottom: 10,
    fontWeight: "bold",
  },
  label: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 10,
  },
  daysContainer: {
    flexDirection: "row",
    justifyContent: "space-around",
    marginBottom: 20,
  },
  dayButton: {
    paddingVertical: 10,
    paddingHorizontal: 15,
    borderRadius: 5,
    borderWidth: 1,
    borderColor: "#007bff",
    backgroundColor: "#fff",
  },
  dayButtonSelected: {
    backgroundColor: "#007bff",
  },
  dayButtonText: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#007bff",
  },
  dayButtonTextSelected: {
    color: "#fff",
  },
  saveButton: {
    backgroundColor: "#28a745",
    padding: 15,
    borderRadius: 10,
    alignItems: "center",
    marginTop: 10,
  },
  saveButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
  scheduleItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    padding: 15,
    borderRadius: 8,
    backgroundColor: "#e9ecef",
    marginVertical: 5,
  },
  deleteText: {
    color: "#dc3545",
    fontWeight: "bold",
  },
});

export default ReminderScreen;
